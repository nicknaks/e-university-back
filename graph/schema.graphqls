# GraphQL schema example
#
# https://gqlgen.com/getting-started/

directive @isAuthenticated on FIELD_DEFINITION
directive @goField(forceResolver: Boolean, name: String) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION

type Query {
    faculties: [Faculty!]!
    groups(filter: groupsFilter): [Group!]
    schedule(filter: scheduleFilter!): [Lesson!]
    teachers(filter: teachersFilter): [Teacher!]
    mySchedule: [Lesson!] @isAuthenticated
    me: User @isAuthenticated
    subjects(filter: subjectsFilter): [Subject!]
    students(filter: studentsFilter): [Student!]
    classes(filter: classesFilter): [Class!]
    subjectResults(filter: subjectResultsFilter): [SubjectResult!]
}

type Mutation {
    login(login: String!,password: String!): Boolean!
    logout: Boolean! @isAuthenticated
    subjectCreate(input: subjectCreateInput!): Subject! @isAuthenticated
    subjectTypeChange(input: subjectTypeChangeInput!): Subject! @isAuthenticated
    lessonCreate(input: lessonCreateInput!): Lesson @isAuthenticated
    studentCreate(input: studentCreateInput!): Student! @isAuthenticated
    markCreate(input: markCreateInput!): ClassProgress! @isAuthenticated
    absentSet(input: absentSetInput!): [ClassProgress!] @isAuthenticated
}

# енамы
enum UserType {
    UNKNOWN
    TEACHER
    STUDENT
    ADMIN
}

enum SubjectType {
    UNKNOWN
    CREDIT
    EXAM
    COURSE_WORK
    PRACTICAL
}

enum LessonType {
    DEFAULT
    LAB
    LEC
    SEM
}

input subjectResultsFilter {
    subjectID: String
    studentID: String
}

# input
input absentSetInput {
    classProgressID: [String!]!
}

input markCreateInput {
    classProgressID: String!
    mark: Int!
}

input classesProgressFilter {
    classID: String
}

input classesFilter {
    ids: [String!]
    subjectID: String
    groupID: String
}

input studentsFilter {
    groupID: String
    subjectID: String
}

input studentCreateInput {
    name: String!
    groupID: String!
}

input subjectCreateInput {
    name: String!
    type: SubjectType!
    teacherID: String!
    groupID: String!
}

input lessonCreateInput {
    subjectID: String!
    type: LessonType!
    couple: Int!
    day: Int!
    cabinet: String
    isDenominator: Boolean!
    isNumerator: Boolean!
}

input subjectTypeChangeInput {
    id: String!
    type: SubjectType!
}

input subjectsFilter {
    ID: [String!]
    groupID: String
    teacherID: String
}

input teachersFilter {
    idIn: [String!]
}

input groupsFilter {
    idIn: [String!]
    departmentID: String
    course: Int
    isMagistracy: Boolean
}

input scheduleFilter {
    groupID: String
    teacherID: String
}

# типы
type SubjectResult {
    id: String!
    studentID: String!
    subjectID: String!
    subject: Subject!  @goField(forceResolver: true)
    firstModuleMark: Int!
    secondModuleMark: Int!
    thirdModuleMark: Int!
    mark: Int!
    """ оценка за предмет """
    total: Int!
}

type Class {
    id: String!
    day: String!
    type: LessonType!
    comment: String
    name: String
    module: Int!
    subjectID: String!
    lessonID: String!
    groupID: String!
    studentProgress: [ClassProgress!] @goField(forceResolver: true)
}

type ClassProgress {
    id: String!
    classID: String!
    studentID: String!
    isAbsent: Boolean!
    teacherID: String
    mark: Int!
}

type Teacher {
    id: String!
    name: String
}

type Subject {
    id: String!
    teacherID: String
    groupID: String!
    name: String
    group: Group @goField(forceResolver: true)
    teacher: Teacher @goField(forceResolver: true)
    type: SubjectType!
}

type Lesson {
    id: String!
    type: LessonType!
    subjectID: String!
    name: String
    couple: Int!
    day: Int!
    groupID: String!
    teacherID: String
    cabinet: String
    isDenominator: Boolean!
    isNumerator: Boolean!
    teacher: Teacher @goField(forceResolver: true)
    group: Group @goField(forceResolver: true)
}

type Faculty {
    id: String!
    number: String!
    name: String!
    departments: [Department!]
}

type Department {
    id: String!
    number: String!
    name: String!
    facultyID: String!
    groups: [Group!]
}

type Group {
    id: String!
    number: String!
    course: Int!
    students: [Student]!
}

type Student {
    id: String!
    name: String!
    groupId: String!
}

# Инпуты


# Payloads
type User {
    id: ID!
    owner_id: String
    type: UserType!
}

