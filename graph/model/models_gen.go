// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Department struct {
	ID        string   `json:"id"`
	Number    string   `json:"number"`
	Name      string   `json:"name"`
	FacultyID string   `json:"facultyID"`
	Groups    []*Group `json:"groups"`
}

type Faculty struct {
	ID          string        `json:"id"`
	Number      string        `json:"number"`
	Name        string        `json:"name"`
	Departments []*Department `json:"departments"`
}

type Group struct {
	ID       string     `json:"id"`
	Number   string     `json:"number"`
	Course   int        `json:"course"`
	Students []*Student `json:"students"`
}

type Lesson struct {
	ID            string     `json:"id"`
	Type          LessonType `json:"type"`
	SubjectID     string     `json:"subjectID"`
	Name          *string    `json:"name"`
	Couple        int        `json:"couple"`
	Day           int        `json:"day"`
	GroupID       string     `json:"groupID"`
	TeacherID     *string    `json:"teacherID"`
	Cabinet       *string    `json:"cabinet"`
	IsDenominator bool       `json:"isDenominator"`
	IsNumerator   bool       `json:"isNumerator"`
}

type Student struct {
	ID     string `json:"id"`
	Name   string `json:"name"`
	Login  string `json:"login"`
	Number string `json:"number"`
}

type Teacher struct {
	ID   string  `json:"id"`
	Name *string `json:"name"`
}

type User struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

type GroupsFilter struct {
	IDIn         []string `json:"idIn"`
	DepartmentID *string  `json:"departmentID"`
	Course       *int     `json:"course"`
}

type ScheduleFilter struct {
	GroupID   *string `json:"groupID"`
	TeacherID *string `json:"teacherID"`
}

type TeachersFilter struct {
	IDIn []string `json:"idIn"`
}

type LessonType string

const (
	LessonTypeDefault LessonType = "DEFAULT"
	LessonTypeLab     LessonType = "LAB"
	LessonTypeLec     LessonType = "LEC"
	LessonTypeSem     LessonType = "SEM"
)

var AllLessonType = []LessonType{
	LessonTypeDefault,
	LessonTypeLab,
	LessonTypeLec,
	LessonTypeSem,
}

func (e LessonType) IsValid() bool {
	switch e {
	case LessonTypeDefault, LessonTypeLab, LessonTypeLec, LessonTypeSem:
		return true
	}
	return false
}

func (e LessonType) String() string {
	return string(e)
}

func (e *LessonType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LessonType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LessonType", str)
	}
	return nil
}

func (e LessonType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
